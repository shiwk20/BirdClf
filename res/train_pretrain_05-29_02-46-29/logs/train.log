2023-05-29 02:46:29,678 - INFO train.py(237): res_path: res/train_pretrain_05-29_02-46-29
2023-05-29 02:46:29,678 - INFO train.py(238): config: {'model': {'dest': 'model.BirdClf', 'paras': {'embed_size': 525}}, 'data': {'img_size': 224, 'data_path': 'data', 'augment': True, 'resized_crop': True, 'herizon_flip': True, 'vertical_flip': True, 'random_affine': False, 'batch_size': 128, 'num_workers': 8}, 'loss': {'dest': 'loss.CrossEntropyLoss', 'weight': 'None', 'reduction': 'mean', 'label_smoothing': 0.2}, 'optimizer': {'type': 'Adam', 'lr': 0.0002, 'weight_decay': 0.001, 'momentum': 0.9}, 'scheduler': {'type': 'CosineAnnealingLR', 'T_max': 50, 'eta_min': 1e-07, 'step_size': 11, 'gamma': 0.1}, 'resume': True, 'ckpt_path': 'checkpoints/resnet50-0676ba61.pth', 'max_epochs': 50, 'val_interval': 1, 'accuracy_thre': 5, 'random_seed': 42}
2023-05-29 02:46:29,729 - INFO train.py(237): res_path: res/train_pretrain_05-29_02-46-29
2023-05-29 02:46:29,729 - INFO train.py(238): config: {'model': {'dest': 'model.BirdClf', 'paras': {'embed_size': 525}}, 'data': {'img_size': 224, 'data_path': 'data', 'augment': True, 'resized_crop': True, 'herizon_flip': True, 'vertical_flip': True, 'random_affine': False, 'batch_size': 128, 'num_workers': 8}, 'loss': {'dest': 'loss.CrossEntropyLoss', 'weight': 'None', 'reduction': 'mean', 'label_smoothing': 0.2}, 'optimizer': {'type': 'Adam', 'lr': 0.0002, 'weight_decay': 0.001, 'momentum': 0.9}, 'scheduler': {'type': 'CosineAnnealingLR', 'T_max': 50, 'eta_min': 1e-07, 'step_size': 11, 'gamma': 0.1}, 'resume': True, 'ckpt_path': 'checkpoints/resnet50-0676ba61.pth', 'max_epochs': 50, 'val_interval': 1, 'accuracy_thre': 5, 'random_seed': 42}
2023-05-29 02:46:29,745 - INFO distributed_c10d.py(228): Added key: store_based_barrier_key:1 to store for rank: 0
2023-05-29 02:46:29,751 - INFO distributed_c10d.py(228): Added key: store_based_barrier_key:1 to store for rank: 1
2023-05-29 02:46:29,751 - INFO distributed_c10d.py(262): Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 2 nodes.
2023-05-29 02:46:29,756 - INFO distributed_c10d.py(262): Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 2 nodes.
2023-05-29 02:46:33,019 - INFO model.py(66): load checkpoint from checkpoints/resnet50-0676ba61.pth, missing keys: ['emb.weight', 'emb.bias'], unexpected keys: ['fc.weight', 'fc.bias']
2023-05-29 02:46:33,020 - INFO model.py(66): load checkpoint from checkpoints/resnet50-0676ba61.pth, missing keys: ['emb.weight', 'emb.bias'], unexpected keys: ['fc.weight', 'fc.bias']
2023-05-29 02:46:36,719 - INFO distributed.py(948): Reducer buckets have been rebuilt in this iteration.
2023-05-29 02:46:36,719 - INFO distributed.py(948): Reducer buckets have been rebuilt in this iteration.
2023-05-29 02:48:53,140 - INFO train.py(145): Epoch: 0, Loss: 2.110652, lr: 0.00020000
2023-05-29 02:48:53,147 - INFO train.py(145): Epoch: 0, Loss: 2.114983, lr: 0.00020000
2023-05-29 02:49:31,662 - INFO test.py(37): train Accuray: 0.857720
2023-05-29 02:49:31,772 - INFO test.py(40): train macro avg: {'precision': 0.8794799153533446, 'recall': 0.8558468526734924, 'f1-score': 0.8575221433102447, 'support': 42318}
2023-05-29 02:49:31,772 - INFO test.py(41): train weighted avg: {'precision': 0.8794724175010128, 'recall': 0.8577201190982561, 'f1-score': 0.8586686200343724, 'support': 42318}
2023-05-29 02:49:34,841 - INFO test.py(37): val Accuray: 0.874667
2023-05-29 02:49:34,855 - INFO test.py(40): val macro avg: {'precision': 0.8957476491762205, 'recall': 0.8746666666666667, 'f1-score': 0.8689591000347303, 'support': 2625}
2023-05-29 02:49:34,855 - INFO test.py(41): val weighted avg: {'precision': 0.8957476491762205, 'recall': 0.8746666666666667, 'f1-score': 0.8689591000347303, 'support': 2625}
2023-05-29 02:49:35,227 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_0_acc_0.874667.pth
2023-05-29 02:51:55,001 - INFO train.py(145): Epoch: 1, Loss: 0.521900, lr: 0.00019980
2023-05-29 02:51:55,003 - INFO train.py(145): Epoch: 1, Loss: 0.528308, lr: 0.00019980
2023-05-29 02:52:33,131 - INFO test.py(37): train Accuray: 0.901933
2023-05-29 02:52:33,240 - INFO test.py(40): train macro avg: {'precision': 0.91451738762015, 'recall': 0.9008202244588824, 'f1-score': 0.9012487684813478, 'support': 42318}
2023-05-29 02:52:33,240 - INFO test.py(41): train weighted avg: {'precision': 0.9147978290746404, 'recall': 0.9019329836003592, 'f1-score': 0.9020507650035466, 'support': 42318}
2023-05-29 02:52:36,353 - INFO test.py(37): val Accuray: 0.912381
2023-05-29 02:52:36,365 - INFO test.py(40): val macro avg: {'precision': 0.9314391534391535, 'recall': 0.9123809523809524, 'f1-score': 0.9096961345532775, 'support': 2625}
2023-05-29 02:52:36,365 - INFO test.py(41): val weighted avg: {'precision': 0.9314391534391535, 'recall': 0.9123809523809524, 'f1-score': 0.9096961345532774, 'support': 2625}
2023-05-29 02:52:36,740 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_1_acc_0.912381.pth
2023-05-29 02:54:54,532 - INFO train.py(145): Epoch: 2, Loss: 0.374737, lr: 0.00019921
2023-05-29 02:54:54,536 - INFO train.py(145): Epoch: 2, Loss: 0.377623, lr: 0.00019921
2023-05-29 02:55:33,091 - INFO test.py(37): train Accuray: 0.918805
2023-05-29 02:55:33,201 - INFO test.py(40): train macro avg: {'precision': 0.9268667800706767, 'recall': 0.9180642993523189, 'f1-score': 0.9183331957918962, 'support': 42318}
2023-05-29 02:55:33,201 - INFO test.py(41): train weighted avg: {'precision': 0.9271541367320892, 'recall': 0.9188052365423697, 'f1-score': 0.918978943686186, 'support': 42318}
2023-05-29 02:55:36,284 - INFO test.py(37): val Accuray: 0.925714
2023-05-29 02:55:36,297 - INFO test.py(40): val macro avg: {'precision': 0.9409007447578877, 'recall': 0.9257142857142857, 'f1-score': 0.9239894549894551, 'support': 2625}
2023-05-29 02:55:36,297 - INFO test.py(41): val weighted avg: {'precision': 0.9409007447578877, 'recall': 0.9257142857142857, 'f1-score': 0.923989454989455, 'support': 2625}
2023-05-29 02:55:36,657 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_2_acc_0.925714.pth
2023-05-29 02:57:56,363 - INFO train.py(145): Epoch: 3, Loss: 0.323437, lr: 0.00019823
2023-05-29 02:57:56,383 - INFO train.py(145): Epoch: 3, Loss: 0.324478, lr: 0.00019823
2023-05-29 02:58:34,769 - INFO test.py(37): train Accuray: 0.919207
2023-05-29 02:58:34,879 - INFO test.py(40): train macro avg: {'precision': 0.9298025000684083, 'recall': 0.9194488138075463, 'f1-score': 0.9179973300999285, 'support': 42318}
2023-05-29 02:58:34,879 - INFO test.py(41): train weighted avg: {'precision': 0.932029268018636, 'recall': 0.9192069568505128, 'f1-score': 0.9192910401673975, 'support': 42318}
2023-05-29 02:58:37,948 - INFO test.py(37): val Accuray: 0.929143
2023-05-29 02:58:37,970 - INFO test.py(40): val macro avg: {'precision': 0.9451008726723011, 'recall': 0.9291428571428573, 'f1-score': 0.9268152429581001, 'support': 2625}
2023-05-29 02:58:37,970 - INFO test.py(41): val weighted avg: {'precision': 0.9451008726723011, 'recall': 0.9291428571428572, 'f1-score': 0.9268152429581, 'support': 2625}
2023-05-29 02:58:38,390 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_3_acc_0.929143.pth
2023-05-29 03:00:57,610 - INFO train.py(145): Epoch: 4, Loss: 0.296371, lr: 0.00019686
2023-05-29 03:00:57,615 - INFO train.py(145): Epoch: 4, Loss: 0.291389, lr: 0.00019686
2023-05-29 03:01:36,002 - INFO test.py(37): train Accuray: 0.928825
2023-05-29 03:01:36,113 - INFO test.py(40): train macro avg: {'precision': 0.9361598670146543, 'recall': 0.9275642317671613, 'f1-score': 0.9273477181705695, 'support': 42318}
2023-05-29 03:01:36,113 - INFO test.py(41): train weighted avg: {'precision': 0.9360757021835596, 'recall': 0.928824613639586, 'f1-score': 0.9281359389165871, 'support': 42318}
2023-05-29 03:01:39,271 - INFO test.py(37): val Accuray: 0.919619
2023-05-29 03:01:39,288 - INFO test.py(40): val macro avg: {'precision': 0.939620559334845, 'recall': 0.9196190476190477, 'f1-score': 0.9170915166377351, 'support': 2625}
2023-05-29 03:01:39,288 - INFO test.py(41): val weighted avg: {'precision': 0.9396205593348452, 'recall': 0.9196190476190477, 'f1-score': 0.917091516637735, 'support': 2625}
2023-05-29 03:01:39,288 - INFO train.py(159): accuracy_flag: 1
2023-05-29 03:03:58,037 - INFO train.py(145): Epoch: 5, Loss: 0.278594, lr: 0.00019511
2023-05-29 03:03:58,040 - INFO train.py(145): Epoch: 5, Loss: 0.281009, lr: 0.00019511
2023-05-29 03:04:36,386 - INFO test.py(37): train Accuray: 0.940687
2023-05-29 03:04:36,497 - INFO test.py(40): train macro avg: {'precision': 0.9461439037624436, 'recall': 0.9403702511972314, 'f1-score': 0.9405318361035531, 'support': 42318}
2023-05-29 03:04:36,497 - INFO test.py(41): train weighted avg: {'precision': 0.9461485624455496, 'recall': 0.9406871780329883, 'f1-score': 0.9406954876914277, 'support': 42318}
2023-05-29 03:04:39,713 - INFO test.py(37): val Accuray: 0.930667
2023-05-29 03:04:39,725 - INFO test.py(40): val macro avg: {'precision': 0.9465963718820861, 'recall': 0.9306666666666666, 'f1-score': 0.9295835698692841, 'support': 2625}
2023-05-29 03:04:39,725 - INFO test.py(41): val weighted avg: {'precision': 0.9465963718820861, 'recall': 0.9306666666666666, 'f1-score': 0.929583569869284, 'support': 2625}
2023-05-29 03:04:40,089 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_5_acc_0.930667.pth
2023-05-29 03:07:00,543 - INFO train.py(145): Epoch: 6, Loss: 0.273905, lr: 0.00019298
2023-05-29 03:07:00,557 - INFO train.py(145): Epoch: 6, Loss: 0.265775, lr: 0.00019298
2023-05-29 03:07:38,893 - INFO test.py(37): train Accuray: 0.942861
2023-05-29 03:07:39,001 - INFO test.py(40): train macro avg: {'precision': 0.9496791371610351, 'recall': 0.9421129638106371, 'f1-score': 0.9426100751308364, 'support': 42318}
2023-05-29 03:07:39,001 - INFO test.py(41): train weighted avg: {'precision': 0.9491090308553711, 'recall': 0.9428611938182334, 'f1-score': 0.942762867089741, 'support': 42318}
2023-05-29 03:07:42,058 - INFO test.py(37): val Accuray: 0.930667
2023-05-29 03:07:42,070 - INFO test.py(40): val macro avg: {'precision': 0.9452155939298797, 'recall': 0.9306666666666668, 'f1-score': 0.9293613159327445, 'support': 2625}
2023-05-29 03:07:42,070 - INFO test.py(41): val weighted avg: {'precision': 0.9452155939298796, 'recall': 0.9306666666666666, 'f1-score': 0.9293613159327445, 'support': 2625}
2023-05-29 03:07:42,070 - INFO train.py(159): accuracy_flag: 1
2023-05-29 03:10:01,433 - INFO train.py(145): Epoch: 7, Loss: 0.253500, lr: 0.00019049
2023-05-29 03:10:01,455 - INFO train.py(145): Epoch: 7, Loss: 0.251923, lr: 0.00019049
2023-05-29 03:10:39,662 - INFO test.py(37): train Accuray: 0.940333
2023-05-29 03:10:39,773 - INFO test.py(40): train macro avg: {'precision': 0.9477557902265458, 'recall': 0.9395536847951107, 'f1-score': 0.9400316653801888, 'support': 42318}
2023-05-29 03:10:39,773 - INFO test.py(41): train weighted avg: {'precision': 0.9477274565389865, 'recall': 0.940332718937568, 'f1-score': 0.940456821277484, 'support': 42318}
2023-05-29 03:10:42,853 - INFO test.py(37): val Accuray: 0.933333
2023-05-29 03:10:42,869 - INFO test.py(40): val macro avg: {'precision': 0.9499640623926339, 'recall': 0.9333333333333333, 'f1-score': 0.9312626579769436, 'support': 2625}
2023-05-29 03:10:42,869 - INFO test.py(41): val weighted avg: {'precision': 0.9499640623926339, 'recall': 0.9333333333333333, 'f1-score': 0.9312626579769439, 'support': 2625}
2023-05-29 03:10:43,229 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_7_acc_0.933333.pth
2023-05-29 03:13:02,484 - INFO train.py(145): Epoch: 8, Loss: 0.243887, lr: 0.00018764
2023-05-29 03:13:02,485 - INFO train.py(145): Epoch: 8, Loss: 0.245860, lr: 0.00018764
2023-05-29 03:13:40,892 - INFO test.py(37): train Accuray: 0.945791
2023-05-29 03:13:41,002 - INFO test.py(40): train macro avg: {'precision': 0.950984808072845, 'recall': 0.9455279109358752, 'f1-score': 0.9456305028691414, 'support': 42318}
2023-05-29 03:13:41,002 - INFO test.py(41): train weighted avg: {'precision': 0.9513918049333163, 'recall': 0.945791389007042, 'f1-score': 0.9460251168783572, 'support': 42318}
2023-05-29 03:13:44,034 - INFO test.py(37): val Accuray: 0.935619
2023-05-29 03:13:44,046 - INFO test.py(40): val macro avg: {'precision': 0.9479406307977737, 'recall': 0.9356190476190476, 'f1-score': 0.9333985855414427, 'support': 2625}
2023-05-29 03:13:44,046 - INFO test.py(41): val weighted avg: {'precision': 0.9479406307977737, 'recall': 0.9356190476190476, 'f1-score': 0.9333985855414427, 'support': 2625}
2023-05-29 03:13:44,400 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_8_acc_0.935619.pth
2023-05-29 03:16:04,208 - INFO train.py(145): Epoch: 9, Loss: 0.237479, lr: 0.00018444
2023-05-29 03:16:04,208 - INFO train.py(145): Epoch: 9, Loss: 0.239298, lr: 0.00018444
2023-05-29 03:16:42,609 - INFO test.py(37): train Accuray: 0.949974
2023-05-29 03:16:42,720 - INFO test.py(40): train macro avg: {'precision': 0.9549296180413855, 'recall': 0.9493598236337102, 'f1-score': 0.949552708995533, 'support': 42318}
2023-05-29 03:16:42,720 - INFO test.py(41): train weighted avg: {'precision': 0.9552975221603184, 'recall': 0.9499740063330026, 'f1-score': 0.9501283021531732, 'support': 42318}
2023-05-29 03:16:45,836 - INFO test.py(37): val Accuray: 0.928000
2023-05-29 03:16:45,850 - INFO test.py(40): val macro avg: {'precision': 0.94420744863602, 'recall': 0.928, 'f1-score': 0.9266084867513439, 'support': 2625}
2023-05-29 03:16:45,851 - INFO test.py(41): val weighted avg: {'precision': 0.94420744863602, 'recall': 0.928, 'f1-score': 0.9266084867513438, 'support': 2625}
2023-05-29 03:16:45,851 - INFO train.py(159): accuracy_flag: 1
2023-05-29 03:19:06,349 - INFO train.py(145): Epoch: 10, Loss: 0.229118, lr: 0.00018091
2023-05-29 03:19:06,359 - INFO train.py(145): Epoch: 10, Loss: 0.227655, lr: 0.00018091
2023-05-29 03:19:44,778 - INFO test.py(37): train Accuray: 0.945768
2023-05-29 03:19:44,886 - INFO test.py(40): train macro avg: {'precision': 0.9526085288562182, 'recall': 0.9453625556170585, 'f1-score': 0.9456317738132108, 'support': 42318}
2023-05-29 03:19:44,887 - INFO test.py(41): train weighted avg: {'precision': 0.952721057257694, 'recall': 0.9457677584006806, 'f1-score': 0.9459606208201103, 'support': 42318}
2023-05-29 03:19:47,994 - INFO test.py(37): val Accuray: 0.938667
2023-05-29 03:19:48,014 - INFO test.py(40): val macro avg: {'precision': 0.9524255479969765, 'recall': 0.9386666666666666, 'f1-score': 0.9361778010349439, 'support': 2625}
2023-05-29 03:19:48,014 - INFO test.py(41): val weighted avg: {'precision': 0.9524255479969767, 'recall': 0.9386666666666666, 'f1-score': 0.9361778010349439, 'support': 2625}
2023-05-29 03:19:48,383 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_10_acc_0.938667.pth
2023-05-29 03:22:07,979 - INFO train.py(145): Epoch: 11, Loss: 0.212518, lr: 0.00017706
2023-05-29 03:22:07,998 - INFO train.py(145): Epoch: 11, Loss: 0.218757, lr: 0.00017706
2023-05-29 03:22:46,129 - INFO test.py(37): train Accuray: 0.938277
2023-05-29 03:22:46,237 - INFO test.py(40): train macro avg: {'precision': 0.94914194825366, 'recall': 0.9377256965778303, 'f1-score': 0.9386105171465025, 'support': 42318}
2023-05-29 03:22:46,237 - INFO test.py(41): train weighted avg: {'precision': 0.9489770898261899, 'recall': 0.9382768561841297, 'f1-score': 0.938862099913007, 'support': 42318}
2023-05-29 03:22:49,427 - INFO test.py(37): val Accuray: 0.923048
2023-05-29 03:22:49,454 - INFO test.py(40): val macro avg: {'precision': 0.9431050642479215, 'recall': 0.9230476190476191, 'f1-score': 0.9211881265326642, 'support': 2625}
2023-05-29 03:22:49,455 - INFO test.py(41): val weighted avg: {'precision': 0.9431050642479214, 'recall': 0.923047619047619, 'f1-score': 0.9211881265326645, 'support': 2625}
2023-05-29 03:22:49,455 - INFO train.py(159): accuracy_flag: 1
2023-05-29 03:25:09,964 - INFO train.py(145): Epoch: 12, Loss: 0.211391, lr: 0.00017291
2023-05-29 03:25:09,964 - INFO train.py(145): Epoch: 12, Loss: 0.214922, lr: 0.00017291
2023-05-29 03:25:48,538 - INFO test.py(37): train Accuray: 0.956803
2023-05-29 03:25:48,648 - INFO test.py(40): train macro avg: {'precision': 0.9603207772694327, 'recall': 0.9562739133714375, 'f1-score': 0.9565599726976558, 'support': 42318}
2023-05-29 03:25:48,648 - INFO test.py(41): train weighted avg: {'precision': 0.960365944112205, 'recall': 0.9568032515714353, 'f1-score': 0.9568700604250754, 'support': 42318}
2023-05-29 03:25:51,709 - INFO test.py(37): val Accuray: 0.938286
2023-05-29 03:25:51,723 - INFO test.py(40): val macro avg: {'precision': 0.9509141757713186, 'recall': 0.9382857142857143, 'f1-score': 0.9372406799549657, 'support': 2625}
2023-05-29 03:25:51,723 - INFO test.py(41): val weighted avg: {'precision': 0.9509141757713185, 'recall': 0.9382857142857143, 'f1-score': 0.9372406799549655, 'support': 2625}
2023-05-29 03:25:51,723 - INFO train.py(159): accuracy_flag: 2
2023-05-29 03:28:12,262 - INFO train.py(145): Epoch: 13, Loss: 0.201085, lr: 0.00016847
2023-05-29 03:28:12,265 - INFO train.py(145): Epoch: 13, Loss: 0.203225, lr: 0.00016847
2023-05-29 03:28:50,576 - INFO test.py(37): train Accuray: 0.955362
2023-05-29 03:28:50,684 - INFO test.py(40): train macro avg: {'precision': 0.9591966135323607, 'recall': 0.9548207306851829, 'f1-score': 0.954850290378062, 'support': 42318}
2023-05-29 03:28:50,684 - INFO test.py(41): train weighted avg: {'precision': 0.9600295212567119, 'recall': 0.9553617845833924, 'f1-score': 0.9556144660673965, 'support': 42318}
2023-05-29 03:28:53,764 - INFO test.py(37): val Accuray: 0.947048
2023-05-29 03:28:53,781 - INFO test.py(40): val macro avg: {'precision': 0.9567770219198791, 'recall': 0.9470476190476191, 'f1-score': 0.9452761947047662, 'support': 2625}
2023-05-29 03:28:53,781 - INFO test.py(41): val weighted avg: {'precision': 0.9567770219198792, 'recall': 0.947047619047619, 'f1-score': 0.9452761947047662, 'support': 2625}
2023-05-29 03:28:54,138 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_13_acc_0.947048.pth
2023-05-29 03:31:13,807 - INFO train.py(145): Epoch: 14, Loss: 0.193845, lr: 0.00016376
2023-05-29 03:31:13,809 - INFO train.py(145): Epoch: 14, Loss: 0.189520, lr: 0.00016376
2023-05-29 03:31:52,207 - INFO test.py(37): train Accuray: 0.954511
2023-05-29 03:31:52,316 - INFO test.py(40): train macro avg: {'precision': 0.9589594718125868, 'recall': 0.9542441443536392, 'f1-score': 0.9545058685883174, 'support': 42318}
2023-05-29 03:31:52,317 - INFO test.py(41): train weighted avg: {'precision': 0.9588762573586214, 'recall': 0.9545110827543835, 'f1-score': 0.9546626734194857, 'support': 42318}
2023-05-29 03:31:55,437 - INFO test.py(37): val Accuray: 0.939048
2023-05-29 03:31:55,449 - INFO test.py(40): val macro avg: {'precision': 0.9505933484504914, 'recall': 0.939047619047619, 'f1-score': 0.937598803313089, 'support': 2625}
2023-05-29 03:31:55,449 - INFO test.py(41): val weighted avg: {'precision': 0.9505933484504914, 'recall': 0.939047619047619, 'f1-score': 0.9375988033130891, 'support': 2625}
2023-05-29 03:31:55,449 - INFO train.py(159): accuracy_flag: 1
2023-05-29 03:34:16,169 - INFO train.py(145): Epoch: 15, Loss: 0.188779, lr: 0.00015880
2023-05-29 03:34:16,185 - INFO train.py(145): Epoch: 15, Loss: 0.187082, lr: 0.00015880
2023-05-29 03:34:54,760 - INFO test.py(37): train Accuray: 0.955456
2023-05-29 03:34:54,869 - INFO test.py(40): train macro avg: {'precision': 0.9589992249194546, 'recall': 0.9551146528954279, 'f1-score': 0.9552309059429276, 'support': 42318}
2023-05-29 03:34:54,870 - INFO test.py(41): train weighted avg: {'precision': 0.9593301021856698, 'recall': 0.9554563070088379, 'f1-score': 0.9555858657779588, 'support': 42318}
2023-05-29 03:34:57,977 - INFO test.py(37): val Accuray: 0.938286
2023-05-29 03:34:57,989 - INFO test.py(40): val macro avg: {'precision': 0.9533507180650037, 'recall': 0.9382857142857142, 'f1-score': 0.9372821569964427, 'support': 2625}
2023-05-29 03:34:57,990 - INFO test.py(41): val weighted avg: {'precision': 0.9533507180650038, 'recall': 0.9382857142857143, 'f1-score': 0.9372821569964428, 'support': 2625}
2023-05-29 03:34:57,990 - INFO train.py(159): accuracy_flag: 2
2023-05-29 03:37:18,572 - INFO train.py(145): Epoch: 16, Loss: 0.181561, lr: 0.00015361
2023-05-29 03:37:18,582 - INFO train.py(145): Epoch: 16, Loss: 0.180719, lr: 0.00015361
2023-05-29 03:37:56,801 - INFO test.py(37): train Accuray: 0.952810
2023-05-29 03:37:56,911 - INFO test.py(40): train macro avg: {'precision': 0.9579832109011366, 'recall': 0.9530639385073474, 'f1-score': 0.9524417263697789, 'support': 42318}
2023-05-29 03:37:56,911 - INFO test.py(41): train weighted avg: {'precision': 0.958968400123739, 'recall': 0.9528096790963656, 'f1-score': 0.9528981757963726, 'support': 42318}
2023-05-29 03:38:00,069 - INFO test.py(37): val Accuray: 0.932571
2023-05-29 03:38:00,083 - INFO test.py(40): val macro avg: {'precision': 0.9476106644678074, 'recall': 0.9325714285714286, 'f1-score': 0.9310382421810993, 'support': 2625}
2023-05-29 03:38:00,083 - INFO test.py(41): val weighted avg: {'precision': 0.9476106644678073, 'recall': 0.9325714285714286, 'f1-score': 0.9310382421810992, 'support': 2625}
2023-05-29 03:38:00,083 - INFO train.py(159): accuracy_flag: 3
2023-05-29 03:40:21,086 - INFO train.py(145): Epoch: 17, Loss: 0.173908, lr: 0.00014820
2023-05-29 03:40:21,095 - INFO train.py(145): Epoch: 17, Loss: 0.167994, lr: 0.00014820
2023-05-29 03:40:59,485 - INFO test.py(37): train Accuray: 0.966728
2023-05-29 03:40:59,594 - INFO test.py(40): train macro avg: {'precision': 0.9696246026089324, 'recall': 0.9663162256742021, 'f1-score': 0.9666071596497128, 'support': 42318}
2023-05-29 03:40:59,594 - INFO test.py(41): train weighted avg: {'precision': 0.9696218483574545, 'recall': 0.9667281062432062, 'f1-score': 0.9668543233278888, 'support': 42318}
2023-05-29 03:41:02,721 - INFO test.py(37): val Accuray: 0.941714
2023-05-29 03:41:02,738 - INFO test.py(40): val macro avg: {'precision': 0.9566099773242631, 'recall': 0.9417142857142857, 'f1-score': 0.9414671976016513, 'support': 2625}
2023-05-29 03:41:02,738 - INFO test.py(41): val weighted avg: {'precision': 0.9566099773242631, 'recall': 0.9417142857142857, 'f1-score': 0.9414671976016514, 'support': 2625}
2023-05-29 03:41:02,738 - INFO train.py(159): accuracy_flag: 4
2023-05-29 03:43:22,206 - INFO train.py(145): Epoch: 18, Loss: 0.160102, lr: 0.00014261
2023-05-29 03:43:22,208 - INFO train.py(145): Epoch: 18, Loss: 0.156152, lr: 0.00014261
2023-05-29 03:44:00,401 - INFO test.py(37): train Accuray: 0.966421
2023-05-29 03:44:00,511 - INFO test.py(40): train macro avg: {'precision': 0.9698016281369071, 'recall': 0.9660351622451533, 'f1-score': 0.9663829014517157, 'support': 42318}
2023-05-29 03:44:00,511 - INFO test.py(41): train weighted avg: {'precision': 0.9696922014733814, 'recall': 0.9664209083605085, 'f1-score': 0.9665364474568469, 'support': 42318}
2023-05-29 03:44:03,572 - INFO test.py(37): val Accuray: 0.943619
2023-05-29 03:44:03,585 - INFO test.py(40): val macro avg: {'precision': 0.9539327286470143, 'recall': 0.9436190476190476, 'f1-score': 0.9420350231778803, 'support': 2625}
2023-05-29 03:44:03,585 - INFO test.py(41): val weighted avg: {'precision': 0.9539327286470143, 'recall': 0.9436190476190476, 'f1-score': 0.9420350231778803, 'support': 2625}
2023-05-29 03:44:03,585 - INFO train.py(159): accuracy_flag: 5
2023-05-29 03:44:03,949 - INFO model.py(111): save ckpt to res/train_pretrain_05-29_02-46-29/ckpts/epoch_18_acc_0.943619.pth
2023-05-29 03:44:03,949 - INFO train.py(170): Training finished! Training time: 0:57:34.271072
