2023-05-29 18:32:58,946 - INFO train.py(247): res_path: res/train_test_balance_05-29_18-32-58
2023-05-29 18:32:58,946 - INFO train.py(248): config: {'model': {'dest': 'model.BirdClf', 'paras': {'embed_size': 16}}, 'data': {'img_size': 224, 'data_path': 'data/test_balance/0', 'augment': True, 'resized_crop': True, 'herizon_flip': True, 'vertical_flip': True, 'random_affine': False, 'batch_size': 32, 'num_workers': 8}, 'loss': {'dest': 'loss.CrossEntropyLoss', 'weight': 'None', 'reduction': 'mean', 'label_smoothing': 0.2}, 'optimizer': {'type': 'Adam', 'lr': 0.0005, 'weight_decay': 0.001, 'momentum': 0.9}, 'scheduler': {'type': 'CosineAnnealingLR', 'T_max': 200, 'eta_min': 1e-07, 'step_size': 11, 'gamma': 0.1}, 'resume': False, 'ckpt_path': '', 'max_epochs': 100, 'val_interval': 1, 'accuracy_thre': 10, 'random_seed': 42}
2023-05-29 18:32:58,961 - INFO train.py(247): res_path: res/train_test_balance_05-29_18-32-58
2023-05-29 18:32:58,962 - INFO train.py(248): config: {'model': {'dest': 'model.BirdClf', 'paras': {'embed_size': 16}}, 'data': {'img_size': 224, 'data_path': 'data/test_balance/0', 'augment': True, 'resized_crop': True, 'herizon_flip': True, 'vertical_flip': True, 'random_affine': False, 'batch_size': 32, 'num_workers': 8}, 'loss': {'dest': 'loss.CrossEntropyLoss', 'weight': 'None', 'reduction': 'mean', 'label_smoothing': 0.2}, 'optimizer': {'type': 'Adam', 'lr': 0.0005, 'weight_decay': 0.001, 'momentum': 0.9}, 'scheduler': {'type': 'CosineAnnealingLR', 'T_max': 200, 'eta_min': 1e-07, 'step_size': 11, 'gamma': 0.1}, 'resume': False, 'ckpt_path': '', 'max_epochs': 100, 'val_interval': 1, 'accuracy_thre': 10, 'random_seed': 42}
2023-05-29 18:32:58,970 - INFO distributed_c10d.py(228): Added key: store_based_barrier_key:1 to store for rank: 1
2023-05-29 18:32:58,985 - INFO distributed_c10d.py(228): Added key: store_based_barrier_key:1 to store for rank: 0
2023-05-29 18:32:58,985 - INFO distributed_c10d.py(262): Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 2 nodes.
2023-05-29 18:32:58,991 - INFO distributed_c10d.py(262): Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 2 nodes.
2023-05-29 18:33:06,990 - INFO distributed.py(948): Reducer buckets have been rebuilt in this iteration.
2023-05-29 18:33:06,994 - INFO distributed.py(948): Reducer buckets have been rebuilt in this iteration.
2023-05-29 18:33:19,371 - INFO train.py(152): Epoch: 0, Loss: 2.609987, lr: 0.00050000
2023-05-29 18:33:19,372 - INFO train.py(152): Epoch: 0, Loss: 2.633188, lr: 0.00050000
2023-05-29 18:33:22,255 - INFO test.py(42): train Accuray: 0.221805
2023-05-29 18:33:22,259 - INFO test.py(45): train macro avg: {'precision': 0.3081803063838793, 'recall': 0.2279698483840673, 'f1-score': 0.1800776883262149, 'support': 1064}
2023-05-29 18:33:22,259 - INFO test.py(46): train weighted avg: {'precision': 0.30788525020736096, 'recall': 0.22180451127819548, 'f1-score': 0.17594348807338758, 'support': 1064}
2023-05-29 18:33:22,755 - INFO test.py(42): val Accuray: 0.225000
2023-05-29 18:33:22,759 - INFO test.py(45): val macro avg: {'precision': 0.17489035087719296, 'recall': 0.225, 'f1-score': 0.16958296064400713, 'support': 80}
2023-05-29 18:33:22,759 - INFO test.py(46): val weighted avg: {'precision': 0.17489035087719296, 'recall': 0.225, 'f1-score': 0.16958296064400716, 'support': 80}
2023-05-29 18:33:23,153 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_0_acc_0.225000.pth
2023-05-29 18:33:43,637 - INFO train.py(152): Epoch: 1, Loss: 2.113286, lr: 0.00049997
2023-05-29 18:33:43,642 - INFO train.py(152): Epoch: 1, Loss: 2.131513, lr: 0.00049997
2023-05-29 18:33:46,929 - INFO test.py(42): train Accuray: 0.350564
2023-05-29 18:33:46,935 - INFO test.py(45): train macro avg: {'precision': 0.4018521336985871, 'recall': 0.3424310179299543, 'f1-score': 0.3245171029226377, 'support': 1064}
2023-05-29 18:33:46,935 - INFO test.py(46): train weighted avg: {'precision': 0.4088427835591974, 'recall': 0.3505639097744361, 'f1-score': 0.3299948184529105, 'support': 1064}
2023-05-29 18:33:47,660 - INFO test.py(42): val Accuray: 0.237500
2023-05-29 18:33:47,663 - INFO test.py(45): val macro avg: {'precision': 0.17736307917228972, 'recall': 0.23750000000000004, 'f1-score': 0.17480158730158732, 'support': 80}
2023-05-29 18:33:47,663 - INFO test.py(46): val weighted avg: {'precision': 0.17736307917228972, 'recall': 0.2375, 'f1-score': 0.1748015873015873, 'support': 80}
2023-05-29 18:33:48,057 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_1_acc_0.237500.pth
2023-05-29 18:34:08,281 - INFO train.py(152): Epoch: 2, Loss: 1.816944, lr: 0.00049988
2023-05-29 18:34:08,291 - INFO train.py(152): Epoch: 2, Loss: 1.839168, lr: 0.00049988
2023-05-29 18:34:12,069 - INFO test.py(42): train Accuray: 0.394737
2023-05-29 18:34:12,073 - INFO test.py(45): train macro avg: {'precision': 0.43558392364855447, 'recall': 0.3878099711154036, 'f1-score': 0.3644371946241901, 'support': 1064}
2023-05-29 18:34:12,073 - INFO test.py(46): train weighted avg: {'precision': 0.4362532363525704, 'recall': 0.39473684210526316, 'f1-score': 0.37037613257983143, 'support': 1064}
2023-05-29 18:34:12,659 - INFO test.py(42): val Accuray: 0.275000
2023-05-29 18:34:12,662 - INFO test.py(45): val macro avg: {'precision': 0.2757661198450672, 'recall': 0.275, 'f1-score': 0.2227418414918415, 'support': 80}
2023-05-29 18:34:12,663 - INFO test.py(46): val weighted avg: {'precision': 0.27576611984506727, 'recall': 0.275, 'f1-score': 0.22274184149184154, 'support': 80}
2023-05-29 18:34:13,064 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_2_acc_0.275000.pth
2023-05-29 18:34:31,939 - INFO train.py(152): Epoch: 3, Loss: 1.737823, lr: 0.00049972
2023-05-29 18:34:31,940 - INFO train.py(152): Epoch: 3, Loss: 1.679156, lr: 0.00049972
2023-05-29 18:34:35,525 - INFO test.py(42): train Accuray: 0.409774
2023-05-29 18:34:35,538 - INFO test.py(45): train macro avg: {'precision': 0.4886098022540645, 'recall': 0.4179331672610054, 'f1-score': 0.38183230137728563, 'support': 1064}
2023-05-29 18:34:35,538 - INFO test.py(46): train weighted avg: {'precision': 0.490246688334699, 'recall': 0.40977443609022557, 'f1-score': 0.37687399305951075, 'support': 1064}
2023-05-29 18:34:36,121 - INFO test.py(42): val Accuray: 0.337500
2023-05-29 18:34:36,124 - INFO test.py(45): val macro avg: {'precision': 0.32690304487179483, 'recall': 0.3375, 'f1-score': 0.2661401098901099, 'support': 80}
2023-05-29 18:34:36,124 - INFO test.py(46): val weighted avg: {'precision': 0.32690304487179483, 'recall': 0.3375, 'f1-score': 0.2661401098901099, 'support': 80}
2023-05-29 18:34:36,518 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_3_acc_0.337500.pth
2023-05-29 18:34:56,687 - INFO train.py(152): Epoch: 4, Loss: 1.570663, lr: 0.00049951
2023-05-29 18:34:56,693 - INFO train.py(152): Epoch: 4, Loss: 1.595088, lr: 0.00049951
2023-05-29 18:35:00,288 - INFO test.py(42): train Accuray: 0.492481
2023-05-29 18:35:00,294 - INFO test.py(45): train macro avg: {'precision': 0.5385187289940214, 'recall': 0.4892604622235189, 'f1-score': 0.48536221864052287, 'support': 1064}
2023-05-29 18:35:00,294 - INFO test.py(46): train weighted avg: {'precision': 0.5342868295021264, 'recall': 0.4924812030075188, 'f1-score': 0.4845231310292655, 'support': 1064}
2023-05-29 18:35:00,877 - INFO test.py(42): val Accuray: 0.375000
2023-05-29 18:35:00,880 - INFO test.py(45): val macro avg: {'precision': 0.38891369047619045, 'recall': 0.375, 'f1-score': 0.3488217664688253, 'support': 80}
2023-05-29 18:35:00,880 - INFO test.py(46): val weighted avg: {'precision': 0.3889136904761904, 'recall': 0.375, 'f1-score': 0.3488217664688253, 'support': 80}
2023-05-29 18:35:01,279 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_4_acc_0.375000.pth
2023-05-29 18:35:22,297 - INFO train.py(152): Epoch: 5, Loss: 1.620464, lr: 0.00049923
2023-05-29 18:35:22,322 - INFO train.py(152): Epoch: 5, Loss: 1.475822, lr: 0.00049923
2023-05-29 18:35:25,795 - INFO test.py(42): train Accuray: 0.509398
2023-05-29 18:35:25,799 - INFO test.py(45): train macro avg: {'precision': 0.6018686748615077, 'recall': 0.5033128371725213, 'f1-score': 0.4743960988995818, 'support': 1064}
2023-05-29 18:35:25,799 - INFO test.py(46): train weighted avg: {'precision': 0.6042451606579732, 'recall': 0.5093984962406015, 'f1-score': 0.4806397058675293, 'support': 1064}
2023-05-29 18:35:26,328 - INFO test.py(42): val Accuray: 0.375000
2023-05-29 18:35:26,331 - INFO test.py(45): val macro avg: {'precision': 0.44107142857142856, 'recall': 0.375, 'f1-score': 0.32847183131625857, 'support': 80}
2023-05-29 18:35:26,331 - INFO test.py(46): val weighted avg: {'precision': 0.44107142857142845, 'recall': 0.375, 'f1-score': 0.32847183131625857, 'support': 80}
2023-05-29 18:35:26,331 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:35:43,201 - INFO train.py(152): Epoch: 6, Loss: 1.395943, lr: 0.00049889
2023-05-29 18:35:43,201 - INFO train.py(152): Epoch: 6, Loss: 1.338410, lr: 0.00049889
2023-05-29 18:35:45,988 - INFO test.py(42): train Accuray: 0.495301
2023-05-29 18:35:45,994 - INFO test.py(45): train macro avg: {'precision': 0.5405851500668992, 'recall': 0.49641995955428114, 'f1-score': 0.48425880764227713, 'support': 1064}
2023-05-29 18:35:45,994 - INFO test.py(46): train weighted avg: {'precision': 0.5419194623142187, 'recall': 0.49530075187969924, 'f1-score': 0.48411766031176645, 'support': 1064}
2023-05-29 18:35:46,525 - INFO test.py(42): val Accuray: 0.475000
2023-05-29 18:35:46,528 - INFO test.py(45): val macro avg: {'precision': 0.49474657287157287, 'recall': 0.47500000000000003, 'f1-score': 0.4395656426906427, 'support': 80}
2023-05-29 18:35:46,528 - INFO test.py(46): val weighted avg: {'precision': 0.49474657287157287, 'recall': 0.475, 'f1-score': 0.43956564269064274, 'support': 80}
2023-05-29 18:35:46,902 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_6_acc_0.475000.pth
2023-05-29 18:36:03,762 - INFO train.py(152): Epoch: 7, Loss: 1.330178, lr: 0.00049849
2023-05-29 18:36:03,771 - INFO train.py(152): Epoch: 7, Loss: 1.335399, lr: 0.00049849
2023-05-29 18:36:06,618 - INFO test.py(42): train Accuray: 0.606203
2023-05-29 18:36:06,622 - INFO test.py(45): train macro avg: {'precision': 0.6413093714320564, 'recall': 0.6039286983982441, 'f1-score': 0.5948817551664505, 'support': 1064}
2023-05-29 18:36:06,622 - INFO test.py(46): train weighted avg: {'precision': 0.6437780786997184, 'recall': 0.606203007518797, 'f1-score': 0.596763272892141, 'support': 1064}
2023-05-29 18:36:07,150 - INFO test.py(42): val Accuray: 0.475000
2023-05-29 18:36:07,153 - INFO test.py(45): val macro avg: {'precision': 0.4222222222222222, 'recall': 0.475, 'f1-score': 0.4179018897768898, 'support': 80}
2023-05-29 18:36:07,154 - INFO test.py(46): val weighted avg: {'precision': 0.42222222222222217, 'recall': 0.475, 'f1-score': 0.41790188977688975, 'support': 80}
2023-05-29 18:36:07,154 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:36:24,185 - INFO train.py(152): Epoch: 8, Loss: 1.245118, lr: 0.00049803
2023-05-29 18:36:24,192 - INFO train.py(152): Epoch: 8, Loss: 1.155197, lr: 0.00049803
2023-05-29 18:36:26,642 - INFO test.py(42): train Accuray: 0.492481
2023-05-29 18:36:26,649 - INFO test.py(45): train macro avg: {'precision': 0.6225279872194169, 'recall': 0.49610169260501635, 'f1-score': 0.4860195039465133, 'support': 1064}
2023-05-29 18:36:26,649 - INFO test.py(46): train weighted avg: {'precision': 0.6241837088655012, 'recall': 0.4924812030075188, 'f1-score': 0.48300568487136986, 'support': 1064}
2023-05-29 18:36:27,123 - INFO test.py(42): val Accuray: 0.350000
2023-05-29 18:36:27,126 - INFO test.py(45): val macro avg: {'precision': 0.47476657329598504, 'recall': 0.35, 'f1-score': 0.3193986568986569, 'support': 80}
2023-05-29 18:36:27,126 - INFO test.py(46): val weighted avg: {'precision': 0.47476657329598504, 'recall': 0.35, 'f1-score': 0.31939865689865693, 'support': 80}
2023-05-29 18:36:27,126 - INFO train.py(169): accuracy_flag: 2
2023-05-29 18:36:44,020 - INFO train.py(152): Epoch: 9, Loss: 1.217558, lr: 0.00049751
2023-05-29 18:36:44,027 - INFO train.py(152): Epoch: 9, Loss: 1.170677, lr: 0.00049751
2023-05-29 18:36:46,219 - INFO test.py(42): train Accuray: 0.669173
2023-05-29 18:36:46,224 - INFO test.py(45): train macro avg: {'precision': 0.7005108006948191, 'recall': 0.6736527364455644, 'f1-score': 0.6716278265175826, 'support': 1064}
2023-05-29 18:36:46,224 - INFO test.py(46): train weighted avg: {'precision': 0.6972796253563052, 'recall': 0.6691729323308271, 'f1-score': 0.6673469371049019, 'support': 1064}
2023-05-29 18:36:46,752 - INFO test.py(42): val Accuray: 0.537500
2023-05-29 18:36:46,755 - INFO test.py(45): val macro avg: {'precision': 0.6508680555555555, 'recall': 0.5375000000000001, 'f1-score': 0.530798694769283, 'support': 80}
2023-05-29 18:36:46,755 - INFO test.py(46): val weighted avg: {'precision': 0.6508680555555555, 'recall': 0.5375, 'f1-score': 0.5307986947692831, 'support': 80}
2023-05-29 18:36:47,135 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_9_acc_0.537500.pth
2023-05-29 18:37:04,156 - INFO train.py(152): Epoch: 10, Loss: 1.031202, lr: 0.00049692
2023-05-29 18:37:04,164 - INFO train.py(152): Epoch: 10, Loss: 0.915345, lr: 0.00049692
2023-05-29 18:37:06,943 - INFO test.py(42): train Accuray: 0.704887
2023-05-29 18:37:06,949 - INFO test.py(45): train macro avg: {'precision': 0.7393959226346516, 'recall': 0.706241466654566, 'f1-score': 0.7065180096252227, 'support': 1064}
2023-05-29 18:37:06,949 - INFO test.py(46): train weighted avg: {'precision': 0.7358023843266841, 'recall': 0.7048872180451128, 'f1-score': 0.704222660624561, 'support': 1064}
2023-05-29 18:37:07,479 - INFO test.py(42): val Accuray: 0.625000
2023-05-29 18:37:07,482 - INFO test.py(45): val macro avg: {'precision': 0.6415731837606837, 'recall': 0.625, 'f1-score': 0.5907266344766344, 'support': 80}
2023-05-29 18:37:07,482 - INFO test.py(46): val weighted avg: {'precision': 0.6415731837606838, 'recall': 0.625, 'f1-score': 0.5907266344766345, 'support': 80}
2023-05-29 18:37:07,852 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_10_acc_0.625000.pth
2023-05-29 18:37:24,807 - INFO train.py(152): Epoch: 11, Loss: 0.981290, lr: 0.00049628
2023-05-29 18:37:24,808 - INFO train.py(152): Epoch: 11, Loss: 1.012093, lr: 0.00049628
2023-05-29 18:37:27,550 - INFO test.py(42): train Accuray: 0.609023
2023-05-29 18:37:27,558 - INFO test.py(45): train macro avg: {'precision': 0.7032907792813985, 'recall': 0.6108732842981797, 'f1-score': 0.6172299483501702, 'support': 1064}
2023-05-29 18:37:27,558 - INFO test.py(46): train weighted avg: {'precision': 0.7056031657815875, 'recall': 0.6090225563909775, 'f1-score': 0.6165565907307188, 'support': 1064}
2023-05-29 18:37:28,075 - INFO test.py(42): val Accuray: 0.612500
2023-05-29 18:37:28,077 - INFO test.py(45): val macro avg: {'precision': 0.6404017857142857, 'recall': 0.6125, 'f1-score': 0.6008862665112665, 'support': 80}
2023-05-29 18:37:28,077 - INFO test.py(46): val weighted avg: {'precision': 0.6404017857142856, 'recall': 0.6125, 'f1-score': 0.6008862665112664, 'support': 80}
2023-05-29 18:37:28,077 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:37:45,222 - INFO train.py(152): Epoch: 12, Loss: 0.947822, lr: 0.00049557
2023-05-29 18:37:45,226 - INFO train.py(152): Epoch: 12, Loss: 1.018748, lr: 0.00049557
2023-05-29 18:37:47,631 - INFO test.py(42): train Accuray: 0.699248
2023-05-29 18:37:47,636 - INFO test.py(45): train macro avg: {'precision': 0.7427103362549536, 'recall': 0.7047210160277417, 'f1-score': 0.7054089267673475, 'support': 1064}
2023-05-29 18:37:47,636 - INFO test.py(46): train weighted avg: {'precision': 0.7441505335893808, 'recall': 0.6992481203007519, 'f1-score': 0.7038677567630046, 'support': 1064}
2023-05-29 18:37:48,093 - INFO test.py(42): val Accuray: 0.675000
2023-05-29 18:37:48,101 - INFO test.py(45): val macro avg: {'precision': 0.6998015873015874, 'recall': 0.675, 'f1-score': 0.6640918109668109, 'support': 80}
2023-05-29 18:37:48,101 - INFO test.py(46): val weighted avg: {'precision': 0.6998015873015873, 'recall': 0.675, 'f1-score': 0.6640918109668108, 'support': 80}
2023-05-29 18:37:48,565 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_12_acc_0.675000.pth
2023-05-29 18:38:05,617 - INFO train.py(152): Epoch: 13, Loss: 0.934192, lr: 0.00049481
2023-05-29 18:38:05,635 - INFO train.py(152): Epoch: 13, Loss: 0.919098, lr: 0.00049481
2023-05-29 18:38:08,388 - INFO test.py(42): train Accuray: 0.628759
2023-05-29 18:38:08,392 - INFO test.py(45): train macro avg: {'precision': 0.7296238843242617, 'recall': 0.6344549534659742, 'f1-score': 0.639400202840295, 'support': 1064}
2023-05-29 18:38:08,392 - INFO test.py(46): train weighted avg: {'precision': 0.7377093682057886, 'recall': 0.6287593984962406, 'f1-score': 0.6412830357498481, 'support': 1064}
2023-05-29 18:38:08,941 - INFO test.py(42): val Accuray: 0.575000
2023-05-29 18:38:08,944 - INFO test.py(45): val macro avg: {'precision': 0.6330094537815125, 'recall': 0.575, 'f1-score': 0.5389072732822733, 'support': 80}
2023-05-29 18:38:08,944 - INFO test.py(46): val weighted avg: {'precision': 0.6330094537815125, 'recall': 0.575, 'f1-score': 0.5389072732822733, 'support': 80}
2023-05-29 18:38:08,944 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:38:26,025 - INFO train.py(152): Epoch: 14, Loss: 0.918208, lr: 0.00049398
2023-05-29 18:38:26,027 - INFO train.py(152): Epoch: 14, Loss: 0.818045, lr: 0.00049398
2023-05-29 18:38:28,749 - INFO test.py(42): train Accuray: 0.745301
2023-05-29 18:38:28,755 - INFO test.py(45): train macro avg: {'precision': 0.7650108852242673, 'recall': 0.7507091665732482, 'f1-score': 0.7435735334926705, 'support': 1064}
2023-05-29 18:38:28,755 - INFO test.py(46): train weighted avg: {'precision': 0.7601140303831426, 'recall': 0.7453007518796992, 'f1-score': 0.7381719978926581, 'support': 1064}
2023-05-29 18:38:29,288 - INFO test.py(42): val Accuray: 0.662500
2023-05-29 18:38:29,293 - INFO test.py(45): val macro avg: {'precision': 0.6380704365079365, 'recall': 0.6625000000000001, 'f1-score': 0.6258196664446665, 'support': 80}
2023-05-29 18:38:29,293 - INFO test.py(46): val weighted avg: {'precision': 0.6380704365079366, 'recall': 0.6625, 'f1-score': 0.6258196664446665, 'support': 80}
2023-05-29 18:38:29,293 - INFO train.py(169): accuracy_flag: 2
2023-05-29 18:38:46,443 - INFO train.py(152): Epoch: 15, Loss: 0.914355, lr: 0.00049309
2023-05-29 18:38:46,455 - INFO train.py(152): Epoch: 15, Loss: 0.841396, lr: 0.00049309
2023-05-29 18:38:48,978 - INFO test.py(42): train Accuray: 0.662594
2023-05-29 18:38:48,990 - INFO test.py(45): train macro avg: {'precision': 0.7219595717296123, 'recall': 0.660182767790257, 'f1-score': 0.6592310406026417, 'support': 1064}
2023-05-29 18:38:48,990 - INFO test.py(46): train weighted avg: {'precision': 0.7223565709698849, 'recall': 0.6625939849624061, 'f1-score': 0.6597812851811864, 'support': 1064}
2023-05-29 18:38:49,833 - INFO test.py(42): val Accuray: 0.550000
2023-05-29 18:38:49,835 - INFO test.py(45): val macro avg: {'precision': 0.5273809523809524, 'recall': 0.55, 'f1-score': 0.5142459256429845, 'support': 80}
2023-05-29 18:38:49,836 - INFO test.py(46): val weighted avg: {'precision': 0.5273809523809524, 'recall': 0.55, 'f1-score': 0.5142459256429845, 'support': 80}
2023-05-29 18:38:49,836 - INFO train.py(169): accuracy_flag: 3
2023-05-29 18:39:06,856 - INFO train.py(152): Epoch: 16, Loss: 0.792775, lr: 0.00049215
2023-05-29 18:39:06,859 - INFO train.py(152): Epoch: 16, Loss: 0.859783, lr: 0.00049215
2023-05-29 18:39:08,787 - INFO test.py(42): train Accuray: 0.703008
2023-05-29 18:39:08,792 - INFO test.py(45): train macro avg: {'precision': 0.7680598847631627, 'recall': 0.7015675009282407, 'f1-score': 0.6974890338570565, 'support': 1064}
2023-05-29 18:39:08,792 - INFO test.py(46): train weighted avg: {'precision': 0.764848004909881, 'recall': 0.7030075187969925, 'f1-score': 0.6981496996709188, 'support': 1064}
2023-05-29 18:39:09,339 - INFO test.py(42): val Accuray: 0.600000
2023-05-29 18:39:09,341 - INFO test.py(45): val macro avg: {'precision': 0.7299107142857143, 'recall': 0.6, 'f1-score': 0.5721502117593449, 'support': 80}
2023-05-29 18:39:09,341 - INFO test.py(46): val weighted avg: {'precision': 0.7299107142857143, 'recall': 0.6, 'f1-score': 0.5721502117593449, 'support': 80}
2023-05-29 18:39:09,342 - INFO train.py(169): accuracy_flag: 4
2023-05-29 18:39:26,410 - INFO train.py(152): Epoch: 17, Loss: 0.778725, lr: 0.00049114
2023-05-29 18:39:26,412 - INFO train.py(152): Epoch: 17, Loss: 0.760500, lr: 0.00049114
2023-05-29 18:39:29,215 - INFO test.py(42): train Accuray: 0.771617
2023-05-29 18:39:29,227 - INFO test.py(45): train macro avg: {'precision': 0.7965629823988651, 'recall': 0.7727891437770988, 'f1-score': 0.7720166555134202, 'support': 1064}
2023-05-29 18:39:29,227 - INFO test.py(46): train weighted avg: {'precision': 0.802656924791914, 'recall': 0.7716165413533834, 'f1-score': 0.7745352876040482, 'support': 1064}
2023-05-29 18:39:29,773 - INFO test.py(42): val Accuray: 0.700000
2023-05-29 18:39:29,776 - INFO test.py(45): val macro avg: {'precision': 0.7327132936507936, 'recall': 0.7, 'f1-score': 0.6884944916194915, 'support': 80}
2023-05-29 18:39:29,776 - INFO test.py(46): val weighted avg: {'precision': 0.7327132936507936, 'recall': 0.7, 'f1-score': 0.6884944916194916, 'support': 80}
2023-05-29 18:39:30,150 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_17_acc_0.700000.pth
2023-05-29 18:39:47,138 - INFO train.py(152): Epoch: 18, Loss: 0.674345, lr: 0.00049008
2023-05-29 18:39:47,142 - INFO train.py(152): Epoch: 18, Loss: 0.692550, lr: 0.00049008
2023-05-29 18:39:49,862 - INFO test.py(42): train Accuray: 0.705827
2023-05-29 18:39:49,868 - INFO test.py(45): train macro avg: {'precision': 0.7390014032808511, 'recall': 0.7105632910599154, 'f1-score': 0.7028955763161147, 'support': 1064}
2023-05-29 18:39:49,868 - INFO test.py(46): train weighted avg: {'precision': 0.7351439384026571, 'recall': 0.7058270676691729, 'f1-score': 0.6992770391433246, 'support': 1064}
2023-05-29 18:39:50,416 - INFO test.py(42): val Accuray: 0.550000
2023-05-29 18:39:50,419 - INFO test.py(45): val macro avg: {'precision': 0.5876869658119658, 'recall': 0.55, 'f1-score': 0.5263888888888888, 'support': 80}
2023-05-29 18:39:50,419 - INFO test.py(46): val weighted avg: {'precision': 0.5876869658119658, 'recall': 0.55, 'f1-score': 0.5263888888888889, 'support': 80}
2023-05-29 18:39:50,419 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:40:07,368 - INFO train.py(152): Epoch: 19, Loss: 0.722302, lr: 0.00048895
2023-05-29 18:40:07,370 - INFO train.py(152): Epoch: 19, Loss: 0.741870, lr: 0.00048895
2023-05-29 18:40:09,725 - INFO test.py(42): train Accuray: 0.734023
2023-05-29 18:40:09,729 - INFO test.py(45): train macro avg: {'precision': 0.7614693909597068, 'recall': 0.7311919149781179, 'f1-score': 0.7281203554633081, 'support': 1064}
2023-05-29 18:40:09,729 - INFO test.py(46): train weighted avg: {'precision': 0.7622244311523512, 'recall': 0.7340225563909775, 'f1-score': 0.7299037806845133, 'support': 1064}
2023-05-29 18:40:10,216 - INFO test.py(42): val Accuray: 0.625000
2023-05-29 18:40:10,218 - INFO test.py(45): val macro avg: {'precision': 0.6778521825396826, 'recall': 0.625, 'f1-score': 0.6087912087912087, 'support': 80}
2023-05-29 18:40:10,218 - INFO test.py(46): val weighted avg: {'precision': 0.6778521825396826, 'recall': 0.625, 'f1-score': 0.6087912087912087, 'support': 80}
2023-05-29 18:40:10,218 - INFO train.py(169): accuracy_flag: 2
2023-05-29 18:40:27,248 - INFO train.py(152): Epoch: 20, Loss: 0.698177, lr: 0.00048777
2023-05-29 18:40:27,249 - INFO train.py(152): Epoch: 20, Loss: 0.620285, lr: 0.00048777
2023-05-29 18:40:30,209 - INFO test.py(42): train Accuray: 0.727444
2023-05-29 18:40:30,214 - INFO test.py(45): train macro avg: {'precision': 0.7968229444384505, 'recall': 0.7221366247683232, 'f1-score': 0.7241738785222825, 'support': 1064}
2023-05-29 18:40:30,214 - INFO test.py(46): train weighted avg: {'precision': 0.7993740144091225, 'recall': 0.7274436090225563, 'f1-score': 0.7287470092617381, 'support': 1064}
2023-05-29 18:40:30,764 - INFO test.py(42): val Accuray: 0.687500
2023-05-29 18:40:30,767 - INFO test.py(45): val macro avg: {'precision': 0.764520202020202, 'recall': 0.6875, 'f1-score': 0.679278187090687, 'support': 80}
2023-05-29 18:40:30,767 - INFO test.py(46): val weighted avg: {'precision': 0.764520202020202, 'recall': 0.6875, 'f1-score': 0.6792781870906871, 'support': 80}
2023-05-29 18:40:30,767 - INFO train.py(169): accuracy_flag: 3
2023-05-29 18:40:47,875 - INFO train.py(152): Epoch: 21, Loss: 0.670202, lr: 0.00048652
2023-05-29 18:40:47,876 - INFO train.py(152): Epoch: 21, Loss: 0.696972, lr: 0.00048652
2023-05-29 18:40:50,598 - INFO test.py(42): train Accuray: 0.712406
2023-05-29 18:40:50,605 - INFO test.py(45): train macro avg: {'precision': 0.7689845334264294, 'recall': 0.7181898068334438, 'f1-score': 0.7072077212802519, 'support': 1064}
2023-05-29 18:40:50,605 - INFO test.py(46): train weighted avg: {'precision': 0.7711785813122533, 'recall': 0.7124060150375939, 'f1-score': 0.7047580911662168, 'support': 1064}
2023-05-29 18:40:51,147 - INFO test.py(42): val Accuray: 0.525000
2023-05-29 18:40:51,152 - INFO test.py(45): val macro avg: {'precision': 0.5495873917748918, 'recall': 0.525, 'f1-score': 0.5049346486846487, 'support': 80}
2023-05-29 18:40:51,152 - INFO test.py(46): val weighted avg: {'precision': 0.5495873917748918, 'recall': 0.525, 'f1-score': 0.5049346486846487, 'support': 80}
2023-05-29 18:40:51,152 - INFO train.py(169): accuracy_flag: 4
2023-05-29 18:41:07,975 - INFO train.py(152): Epoch: 22, Loss: 0.686982, lr: 0.00048522
2023-05-29 18:41:07,976 - INFO train.py(152): Epoch: 22, Loss: 0.640880, lr: 0.00048522
2023-05-29 18:41:10,725 - INFO test.py(42): train Accuray: 0.769737
2023-05-29 18:41:10,730 - INFO test.py(45): train macro avg: {'precision': 0.8215519884073467, 'recall': 0.7678143315391426, 'f1-score': 0.7736351030034574, 'support': 1064}
2023-05-29 18:41:10,730 - INFO test.py(46): train weighted avg: {'precision': 0.8165452266952572, 'recall': 0.7697368421052632, 'f1-score': 0.7721728816023197, 'support': 1064}
2023-05-29 18:41:11,296 - INFO test.py(42): val Accuray: 0.725000
2023-05-29 18:41:11,299 - INFO test.py(45): val macro avg: {'precision': 0.7881696428571429, 'recall': 0.7250000000000001, 'f1-score': 0.700773532023532, 'support': 80}
2023-05-29 18:41:11,299 - INFO test.py(46): val weighted avg: {'precision': 0.7881696428571429, 'recall': 0.725, 'f1-score': 0.700773532023532, 'support': 80}
2023-05-29 18:41:11,719 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_22_acc_0.725000.pth
2023-05-29 18:41:28,980 - INFO train.py(152): Epoch: 23, Loss: 0.609281, lr: 0.00048386
2023-05-29 18:41:28,981 - INFO train.py(152): Epoch: 23, Loss: 0.545641, lr: 0.00048386
2023-05-29 18:41:30,786 - INFO test.py(42): train Accuray: 0.782895
2023-05-29 18:41:30,790 - INFO test.py(45): train macro avg: {'precision': 0.8143822545620186, 'recall': 0.7830155066383848, 'f1-score': 0.7869702570994783, 'support': 1064}
2023-05-29 18:41:30,790 - INFO test.py(46): train weighted avg: {'precision': 0.8146687342390411, 'recall': 0.7828947368421053, 'f1-score': 0.7865273983433105, 'support': 1064}
2023-05-29 18:41:31,436 - INFO test.py(42): val Accuray: 0.712500
2023-05-29 18:41:31,440 - INFO test.py(45): val macro avg: {'precision': 0.7523809523809524, 'recall': 0.7125, 'f1-score': 0.7019886363636363, 'support': 80}
2023-05-29 18:41:31,440 - INFO test.py(46): val weighted avg: {'precision': 0.7523809523809524, 'recall': 0.7125, 'f1-score': 0.7019886363636363, 'support': 80}
2023-05-29 18:41:31,440 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:41:48,681 - INFO train.py(152): Epoch: 24, Loss: 0.622469, lr: 0.00048245
2023-05-29 18:41:48,681 - INFO train.py(152): Epoch: 24, Loss: 0.559087, lr: 0.00048245
2023-05-29 18:41:51,494 - INFO test.py(42): train Accuray: 0.660714
2023-05-29 18:41:51,499 - INFO test.py(45): train macro avg: {'precision': 0.7587895562782232, 'recall': 0.662563091699776, 'f1-score': 0.65158411301119, 'support': 1064}
2023-05-29 18:41:51,499 - INFO test.py(46): train weighted avg: {'precision': 0.759088762126511, 'recall': 0.6607142857142857, 'f1-score': 0.6510473842880763, 'support': 1064}
2023-05-29 18:41:52,023 - INFO test.py(42): val Accuray: 0.487500
2023-05-29 18:41:52,027 - INFO test.py(45): val macro avg: {'precision': 0.5227869352869352, 'recall': 0.48750000000000004, 'f1-score': 0.441310817805383, 'support': 80}
2023-05-29 18:41:52,027 - INFO test.py(46): val weighted avg: {'precision': 0.5227869352869353, 'recall': 0.4875, 'f1-score': 0.44131081780538306, 'support': 80}
2023-05-29 18:41:52,027 - INFO train.py(169): accuracy_flag: 2
2023-05-29 18:42:08,941 - INFO train.py(152): Epoch: 25, Loss: 0.623273, lr: 0.00048097
2023-05-29 18:42:08,948 - INFO train.py(152): Epoch: 25, Loss: 0.543886, lr: 0.00048097
2023-05-29 18:42:11,679 - INFO test.py(42): train Accuray: 0.767857
2023-05-29 18:42:11,684 - INFO test.py(45): train macro avg: {'precision': 0.8047651234596259, 'recall': 0.7732531948397849, 'f1-score': 0.767328657323098, 'support': 1064}
2023-05-29 18:42:11,684 - INFO test.py(46): train weighted avg: {'precision': 0.8087258895974616, 'recall': 0.7678571428571429, 'f1-score': 0.7666428120047655, 'support': 1064}
2023-05-29 18:42:12,239 - INFO test.py(42): val Accuray: 0.725000
2023-05-29 18:42:12,242 - INFO test.py(45): val macro avg: {'precision': 0.7716856060606061, 'recall': 0.7250000000000001, 'f1-score': 0.7286435786435786, 'support': 80}
2023-05-29 18:42:12,242 - INFO test.py(46): val weighted avg: {'precision': 0.7716856060606061, 'recall': 0.725, 'f1-score': 0.7286435786435785, 'support': 80}
2023-05-29 18:42:12,242 - INFO train.py(169): accuracy_flag: 3
2023-05-29 18:42:29,168 - INFO train.py(152): Epoch: 26, Loss: 0.531428, lr: 0.00047944
2023-05-29 18:42:29,171 - INFO train.py(152): Epoch: 26, Loss: 0.528459, lr: 0.00047944
2023-05-29 18:42:31,429 - INFO test.py(42): train Accuray: 0.772556
2023-05-29 18:42:31,434 - INFO test.py(45): train macro avg: {'precision': 0.8141992703849685, 'recall': 0.7755891981622003, 'f1-score': 0.7720217725447855, 'support': 1064}
2023-05-29 18:42:31,434 - INFO test.py(46): train weighted avg: {'precision': 0.8176544883642035, 'recall': 0.7725563909774437, 'f1-score': 0.7724030718761332, 'support': 1064}
2023-05-29 18:42:31,967 - INFO test.py(42): val Accuray: 0.625000
2023-05-29 18:42:31,970 - INFO test.py(45): val macro avg: {'precision': 0.7666800213675213, 'recall': 0.625, 'f1-score': 0.632663863913864, 'support': 80}
2023-05-29 18:42:31,970 - INFO test.py(46): val weighted avg: {'precision': 0.7666800213675213, 'recall': 0.625, 'f1-score': 0.632663863913864, 'support': 80}
2023-05-29 18:42:31,970 - INFO train.py(169): accuracy_flag: 4
2023-05-29 18:42:48,831 - INFO train.py(152): Epoch: 27, Loss: 0.482527, lr: 0.00047786
2023-05-29 18:42:48,839 - INFO train.py(152): Epoch: 27, Loss: 0.515870, lr: 0.00047786
2023-05-29 18:42:51,005 - INFO test.py(42): train Accuray: 0.734023
2023-05-29 18:42:51,010 - INFO test.py(45): train macro avg: {'precision': 0.8059650824483502, 'recall': 0.7332447517928342, 'f1-score': 0.7300932307313003, 'support': 1064}
2023-05-29 18:42:51,010 - INFO test.py(46): train weighted avg: {'precision': 0.8049781836501692, 'recall': 0.7340225563909775, 'f1-score': 0.72943845042728, 'support': 1064}
2023-05-29 18:42:51,586 - INFO test.py(42): val Accuray: 0.562500
2023-05-29 18:42:51,589 - INFO test.py(45): val macro avg: {'precision': 0.5850862219887956, 'recall': 0.5625, 'f1-score': 0.5224386724386725, 'support': 80}
2023-05-29 18:42:51,589 - INFO test.py(46): val weighted avg: {'precision': 0.5850862219887955, 'recall': 0.5625, 'f1-score': 0.5224386724386724, 'support': 80}
2023-05-29 18:42:51,589 - INFO train.py(169): accuracy_flag: 5
2023-05-29 18:43:08,587 - INFO train.py(152): Epoch: 28, Loss: 0.470071, lr: 0.00047621
2023-05-29 18:43:08,592 - INFO train.py(152): Epoch: 28, Loss: 0.485095, lr: 0.00047621
2023-05-29 18:43:11,365 - INFO test.py(42): train Accuray: 0.772556
2023-05-29 18:43:11,371 - INFO test.py(45): train macro avg: {'precision': 0.7960545735587283, 'recall': 0.7746460519290077, 'f1-score': 0.771911235884196, 'support': 1064}
2023-05-29 18:43:11,371 - INFO test.py(46): train weighted avg: {'precision': 0.7967779410501008, 'recall': 0.7725563909774437, 'f1-score': 0.7711698920438157, 'support': 1064}
2023-05-29 18:43:11,901 - INFO test.py(42): val Accuray: 0.700000
2023-05-29 18:43:11,904 - INFO test.py(45): val macro avg: {'precision': 0.7220328282828283, 'recall': 0.7000000000000001, 'f1-score': 0.6850299006549005, 'support': 80}
2023-05-29 18:43:11,904 - INFO test.py(46): val weighted avg: {'precision': 0.7220328282828283, 'recall': 0.7, 'f1-score': 0.6850299006549007, 'support': 80}
2023-05-29 18:43:11,905 - INFO train.py(169): accuracy_flag: 6
2023-05-29 18:43:28,912 - INFO train.py(152): Epoch: 29, Loss: 0.504343, lr: 0.00047451
2023-05-29 18:43:28,918 - INFO train.py(152): Epoch: 29, Loss: 0.489885, lr: 0.00047451
2023-05-29 18:43:31,639 - INFO test.py(42): train Accuray: 0.788534
2023-05-29 18:43:31,644 - INFO test.py(45): train macro avg: {'precision': 0.8320628900130882, 'recall': 0.7928957891946422, 'f1-score': 0.7893726719561714, 'support': 1064}
2023-05-29 18:43:31,644 - INFO test.py(46): train weighted avg: {'precision': 0.8345193969086521, 'recall': 0.7885338345864662, 'f1-score': 0.7885234147394985, 'support': 1064}
2023-05-29 18:43:32,164 - INFO test.py(42): val Accuray: 0.762500
2023-05-29 18:43:32,167 - INFO test.py(45): val macro avg: {'precision': 0.8145585317460318, 'recall': 0.7625000000000001, 'f1-score': 0.7532266344766345, 'support': 80}
2023-05-29 18:43:32,167 - INFO test.py(46): val weighted avg: {'precision': 0.8145585317460318, 'recall': 0.7625, 'f1-score': 0.7532266344766345, 'support': 80}
2023-05-29 18:43:32,539 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_29_acc_0.762500.pth
2023-05-29 18:43:49,523 - INFO train.py(152): Epoch: 30, Loss: 0.472597, lr: 0.00047276
2023-05-29 18:43:49,523 - INFO train.py(152): Epoch: 30, Loss: 0.538458, lr: 0.00047276
2023-05-29 18:43:51,834 - INFO test.py(42): train Accuray: 0.839286
2023-05-29 18:43:51,838 - INFO test.py(45): train macro avg: {'precision': 0.8587374387116573, 'recall': 0.8394947487368314, 'f1-score': 0.839261962669299, 'support': 1064}
2023-05-29 18:43:51,838 - INFO test.py(46): train weighted avg: {'precision': 0.8589156064414554, 'recall': 0.8392857142857143, 'f1-score': 0.8393410162951135, 'support': 1064}
2023-05-29 18:43:52,309 - INFO test.py(42): val Accuray: 0.812500
2023-05-29 18:43:52,316 - INFO test.py(45): val macro avg: {'precision': 0.8378720238095239, 'recall': 0.8125000000000001, 'f1-score': 0.8110819735819736, 'support': 80}
2023-05-29 18:43:52,316 - INFO test.py(46): val weighted avg: {'precision': 0.8378720238095237, 'recall': 0.8125, 'f1-score': 0.8110819735819735, 'support': 80}
2023-05-29 18:43:52,689 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_30_acc_0.812500.pth
2023-05-29 18:44:09,743 - INFO train.py(152): Epoch: 31, Loss: 0.448730, lr: 0.00047095
2023-05-29 18:44:09,752 - INFO train.py(152): Epoch: 31, Loss: 0.456514, lr: 0.00047095
2023-05-29 18:44:11,497 - INFO test.py(42): train Accuray: 0.771617
2023-05-29 18:44:11,508 - INFO test.py(45): train macro avg: {'precision': 0.8142730199847308, 'recall': 0.7740259462920085, 'f1-score': 0.7744565838353102, 'support': 1064}
2023-05-29 18:44:11,509 - INFO test.py(46): train weighted avg: {'precision': 0.8227901948985408, 'recall': 0.7716165413533834, 'f1-score': 0.777717147625509, 'support': 1064}
2023-05-29 18:44:11,982 - INFO test.py(42): val Accuray: 0.737500
2023-05-29 18:44:11,986 - INFO test.py(45): val macro avg: {'precision': 0.786656746031746, 'recall': 0.7374999999999999, 'f1-score': 0.7363459457209458, 'support': 80}
2023-05-29 18:44:11,986 - INFO test.py(46): val weighted avg: {'precision': 0.7866567460317461, 'recall': 0.7375, 'f1-score': 0.7363459457209458, 'support': 80}
2023-05-29 18:44:11,986 - INFO train.py(169): accuracy_flag: 1
2023-05-29 18:44:25,019 - INFO train.py(152): Epoch: 32, Loss: 0.479371, lr: 0.00046908
2023-05-29 18:44:25,024 - INFO train.py(152): Epoch: 32, Loss: 0.466763, lr: 0.00046908
2023-05-29 18:44:26,709 - INFO test.py(42): train Accuray: 0.802632
2023-05-29 18:44:26,714 - INFO test.py(45): train macro avg: {'precision': 0.8526306349750585, 'recall': 0.8015319734429678, 'f1-score': 0.8079705256529338, 'support': 1064}
2023-05-29 18:44:26,714 - INFO test.py(46): train weighted avg: {'precision': 0.8449198469045197, 'recall': 0.8026315789473685, 'f1-score': 0.8048223653190119, 'support': 1064}
2023-05-29 18:44:27,160 - INFO test.py(42): val Accuray: 0.737500
2023-05-29 18:44:27,166 - INFO test.py(45): val macro avg: {'precision': 0.7722222222222223, 'recall': 0.7375, 'f1-score': 0.7220102813852813, 'support': 80}
2023-05-29 18:44:27,166 - INFO test.py(46): val weighted avg: {'precision': 0.7722222222222221, 'recall': 0.7375, 'f1-score': 0.7220102813852814, 'support': 80}
2023-05-29 18:44:27,167 - INFO train.py(169): accuracy_flag: 2
2023-05-29 18:44:40,223 - INFO train.py(152): Epoch: 33, Loss: 0.451273, lr: 0.00046716
2023-05-29 18:44:40,225 - INFO train.py(152): Epoch: 33, Loss: 0.410161, lr: 0.00046716
2023-05-29 18:44:41,901 - INFO test.py(42): train Accuray: 0.844925
2023-05-29 18:44:41,905 - INFO test.py(45): train macro avg: {'precision': 0.8710678168632371, 'recall': 0.847274524064185, 'f1-score': 0.8449972076118057, 'support': 1064}
2023-05-29 18:44:41,906 - INFO test.py(46): train weighted avg: {'precision': 0.876424131651633, 'recall': 0.8449248120300752, 'f1-score': 0.8467191631236305, 'support': 1064}
2023-05-29 18:44:42,366 - INFO test.py(42): val Accuray: 0.687500
2023-05-29 18:44:42,369 - INFO test.py(45): val macro avg: {'precision': 0.7749313186813187, 'recall': 0.6875, 'f1-score': 0.6723439754689755, 'support': 80}
2023-05-29 18:44:42,369 - INFO test.py(46): val weighted avg: {'precision': 0.7749313186813186, 'recall': 0.6875, 'f1-score': 0.6723439754689755, 'support': 80}
2023-05-29 18:44:42,369 - INFO train.py(169): accuracy_flag: 3
2023-05-29 18:44:55,420 - INFO train.py(152): Epoch: 34, Loss: 0.449888, lr: 0.00046519
2023-05-29 18:44:55,422 - INFO train.py(152): Epoch: 34, Loss: 0.430142, lr: 0.00046519
2023-05-29 18:44:57,130 - INFO test.py(42): train Accuray: 0.845865
2023-05-29 18:44:57,135 - INFO test.py(45): train macro avg: {'precision': 0.8798848446848057, 'recall': 0.840422753394759, 'f1-score': 0.8374379941704215, 'support': 1064}
2023-05-29 18:44:57,135 - INFO test.py(46): train weighted avg: {'precision': 0.8824383650861867, 'recall': 0.8458646616541353, 'f1-score': 0.8431115314597416, 'support': 1064}
2023-05-29 18:44:57,612 - INFO test.py(42): val Accuray: 0.737500
2023-05-29 18:44:57,614 - INFO test.py(45): val macro avg: {'precision': 0.8058531746031745, 'recall': 0.7375, 'f1-score': 0.7170544733044732, 'support': 80}
2023-05-29 18:44:57,615 - INFO test.py(46): val weighted avg: {'precision': 0.8058531746031747, 'recall': 0.7375, 'f1-score': 0.7170544733044732, 'support': 80}
2023-05-29 18:44:57,615 - INFO train.py(169): accuracy_flag: 4
2023-05-29 18:45:10,703 - INFO train.py(152): Epoch: 35, Loss: 0.372730, lr: 0.00046317
2023-05-29 18:45:10,709 - INFO train.py(152): Epoch: 35, Loss: 0.366136, lr: 0.00046317
2023-05-29 18:45:12,378 - INFO test.py(42): train Accuray: 0.844925
2023-05-29 18:45:12,390 - INFO test.py(45): train macro avg: {'precision': 0.8610194193289578, 'recall': 0.8434163464608742, 'f1-score': 0.8392079211150951, 'support': 1064}
2023-05-29 18:45:12,390 - INFO test.py(46): train weighted avg: {'precision': 0.8629502344004237, 'recall': 0.8449248120300752, 'f1-score': 0.8404565526111287, 'support': 1064}
2023-05-29 18:45:12,866 - INFO test.py(42): val Accuray: 0.787500
2023-05-29 18:45:12,870 - INFO test.py(45): val macro avg: {'precision': 0.8434275793650794, 'recall': 0.7875000000000001, 'f1-score': 0.7862633893883895, 'support': 80}
2023-05-29 18:45:12,870 - INFO test.py(46): val weighted avg: {'precision': 0.8434275793650794, 'recall': 0.7875, 'f1-score': 0.7862633893883894, 'support': 80}
2023-05-29 18:45:12,870 - INFO train.py(169): accuracy_flag: 5
2023-05-29 18:45:25,927 - INFO train.py(152): Epoch: 36, Loss: 0.397797, lr: 0.00046109
2023-05-29 18:45:25,932 - INFO train.py(152): Epoch: 36, Loss: 0.412934, lr: 0.00046109
2023-05-29 18:45:27,613 - INFO test.py(42): train Accuray: 0.833647
2023-05-29 18:45:27,619 - INFO test.py(45): train macro avg: {'precision': 0.8627384671523286, 'recall': 0.8327741748617554, 'f1-score': 0.8373027631062415, 'support': 1064}
2023-05-29 18:45:27,619 - INFO test.py(46): train weighted avg: {'precision': 0.8621826620587867, 'recall': 0.8336466165413534, 'f1-score': 0.8372315549738724, 'support': 1064}
2023-05-29 18:45:28,096 - INFO test.py(42): val Accuray: 0.725000
2023-05-29 18:45:28,100 - INFO test.py(45): val macro avg: {'precision': 0.8228039321789322, 'recall': 0.725, 'f1-score': 0.7180761946386947, 'support': 80}
2023-05-29 18:45:28,100 - INFO test.py(46): val weighted avg: {'precision': 0.8228039321789321, 'recall': 0.725, 'f1-score': 0.7180761946386947, 'support': 80}
2023-05-29 18:45:28,100 - INFO train.py(169): accuracy_flag: 6
2023-05-29 18:45:41,189 - INFO train.py(152): Epoch: 37, Loss: 0.445788, lr: 0.00045896
2023-05-29 18:45:41,200 - INFO train.py(152): Epoch: 37, Loss: 0.428973, lr: 0.00045896
2023-05-29 18:45:42,857 - INFO test.py(42): train Accuray: 0.831767
2023-05-29 18:45:42,861 - INFO test.py(45): train macro avg: {'precision': 0.8550624918177955, 'recall': 0.8307650304315124, 'f1-score': 0.8296732105019005, 'support': 1064}
2023-05-29 18:45:42,861 - INFO test.py(46): train weighted avg: {'precision': 0.8614661747021026, 'recall': 0.831766917293233, 'f1-score': 0.833834837190559, 'support': 1064}
2023-05-29 18:45:43,302 - INFO test.py(42): val Accuray: 0.800000
2023-05-29 18:45:43,305 - INFO test.py(45): val macro avg: {'precision': 0.852827380952381, 'recall': 0.8, 'f1-score': 0.7886727855477855, 'support': 80}
2023-05-29 18:45:43,305 - INFO test.py(46): val weighted avg: {'precision': 0.852827380952381, 'recall': 0.8, 'f1-score': 0.7886727855477854, 'support': 80}
2023-05-29 18:45:43,305 - INFO train.py(169): accuracy_flag: 7
2023-05-29 18:45:56,416 - INFO train.py(152): Epoch: 38, Loss: 0.373265, lr: 0.00045678
2023-05-29 18:45:56,416 - INFO train.py(152): Epoch: 38, Loss: 0.440414, lr: 0.00045678
2023-05-29 18:45:58,100 - INFO test.py(42): train Accuray: 0.789474
2023-05-29 18:45:58,105 - INFO test.py(45): train macro avg: {'precision': 0.8379280131388365, 'recall': 0.7871479676137776, 'f1-score': 0.7837287338842293, 'support': 1064}
2023-05-29 18:45:58,105 - INFO test.py(46): train weighted avg: {'precision': 0.8408996515637209, 'recall': 0.7894736842105263, 'f1-score': 0.7870398621844013, 'support': 1064}
2023-05-29 18:45:58,564 - INFO test.py(42): val Accuray: 0.725000
2023-05-29 18:45:58,568 - INFO test.py(45): val macro avg: {'precision': 0.7999313186813187, 'recall': 0.7250000000000001, 'f1-score': 0.7231521950271951, 'support': 80}
2023-05-29 18:45:58,568 - INFO test.py(46): val weighted avg: {'precision': 0.7999313186813187, 'recall': 0.725, 'f1-score': 0.7231521950271951, 'support': 80}
2023-05-29 18:45:58,568 - INFO train.py(169): accuracy_flag: 8
2023-05-29 18:46:11,742 - INFO train.py(152): Epoch: 39, Loss: 0.387494, lr: 0.00045455
2023-05-29 18:46:11,758 - INFO train.py(152): Epoch: 39, Loss: 0.359461, lr: 0.00045455
2023-05-29 18:46:13,446 - INFO test.py(42): train Accuray: 0.849624
2023-05-29 18:46:13,450 - INFO test.py(45): train macro avg: {'precision': 0.8683235305605949, 'recall': 0.8518201304106748, 'f1-score': 0.8529945839796738, 'support': 1064}
2023-05-29 18:46:13,450 - INFO test.py(46): train weighted avg: {'precision': 0.8700000046164846, 'recall': 0.849624060150376, 'f1-score': 0.8525505048153263, 'support': 1064}
2023-05-29 18:46:13,914 - INFO test.py(42): val Accuray: 0.712500
2023-05-29 18:46:13,918 - INFO test.py(45): val macro avg: {'precision': 0.8195283882783883, 'recall': 0.7125, 'f1-score': 0.715856018981019, 'support': 80}
2023-05-29 18:46:13,918 - INFO test.py(46): val weighted avg: {'precision': 0.8195283882783884, 'recall': 0.7125, 'f1-score': 0.715856018981019, 'support': 80}
2023-05-29 18:46:13,918 - INFO train.py(169): accuracy_flag: 9
2023-05-29 18:46:27,020 - INFO train.py(152): Epoch: 40, Loss: 0.351473, lr: 0.00045226
2023-05-29 18:46:27,024 - INFO train.py(152): Epoch: 40, Loss: 0.390357, lr: 0.00045226
2023-05-29 18:46:28,684 - INFO test.py(42): train Accuray: 0.817669
2023-05-29 18:46:28,689 - INFO test.py(45): train macro avg: {'precision': 0.8591334721090202, 'recall': 0.8141542493840708, 'f1-score': 0.8071173700869391, 'support': 1064}
2023-05-29 18:46:28,689 - INFO test.py(46): train weighted avg: {'precision': 0.8615300979926771, 'recall': 0.8176691729323309, 'f1-score': 0.8109093686249875, 'support': 1064}
2023-05-29 18:46:29,143 - INFO test.py(42): val Accuray: 0.775000
2023-05-29 18:46:29,149 - INFO test.py(45): val macro avg: {'precision': 0.8029761904761905, 'recall': 0.775, 'f1-score': 0.7601509601509602, 'support': 80}
2023-05-29 18:46:29,149 - INFO test.py(46): val weighted avg: {'precision': 0.8029761904761905, 'recall': 0.775, 'f1-score': 0.7601509601509602, 'support': 80}
2023-05-29 18:46:29,150 - INFO train.py(169): accuracy_flag: 10
2023-05-29 18:46:29,513 - INFO model.py(142): save ckpt to res/train_test_balance_05-29_18-32-58/ckpts/epoch_40_acc_0.775000.pth
2023-05-29 18:46:29,513 - INFO train.py(180): Training finished! Training time: 0:13:30.552371
2023-05-29 19:17:40,442 - ERROR train.py(173): NCCL communicator was aborted on rank 1.  Original reason for failure was: [Rank 1] Watchdog caught collective operation timeout: WorkNCCL(SeqNum=154741, OpType=_ALLGATHER_BASE, Timeout(ms)=1800000) ran for 1801524 milliseconds before timing out.
